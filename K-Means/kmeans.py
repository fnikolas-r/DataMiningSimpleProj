# -*- coding: utf-8 -*-
"""Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WvfrJhxh1BNr0T2iSihIQcns3GAwKrES
"""

import os
import pandas as pd
from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import tabulate
import time

def get_first_word(words:str)->str:
    all = ""
    for w in words.split(' '):
        all +=w[0]
    return all

def buat_dataset(filename,index_name,sep=','):
    
    df = pd.read_csv(filename,sep=sep)
    
    index = list(df[index_name])
    del df[index_name]
    
    dframe = {
        'nama_full':index,
        'kolom':list(df.columns),
        'akronim':[get_first_word(x) for x in index ],
        'data':df.to_numpy().tolist()
    }

    return dframe



def randomN(x:int,N:int)->int:
    """Menghasilkan N Angka Random

    Args:
        x: 

    Returns:
        int: 
    """
    daftarN = []
    count = 0
    while count < N:
        time.time()
        random=int(time.time()*1000)
        random %= x
        if random not in daftarN:
            daftarN.append(random)
            count +=1
    return daftarN

def hitung_jarak(point_start:list,point:list)->float:
    if len(point_start)==len(point):
        res = 0
        for St,pt in zip(point_start,point):
            res += (St-pt)**2
        
        return res**(0.5)
    else:
        print("Panjang Acuan dan poin tidak sesuai")
        print(len(point_start),"!=",len(point))
        raise ValueError

class Cluster:

    def __init__(self,cluster:int,data,nama):
        self.id = cluster
        self.data = data
        self.nama = nama
    
    @property
    def df(self):
        output = {"nama":self.nama}
        for key,val in self.data.items():
            output['axis'+str(key)] = val
        output['cluster'] = [self.id] * len(self.nama)
        print(self)
        return pd.DataFrame(output)

    def __repr__(self):
        return f"Cluster {self.id} ({len(self.nama)}item)"
    
    def __str__(self):
        return f"Cluster {self.id} ({len(self.nama)}item)"

def combination(lst, n):
	
	if n == 0:
		return [[]]
	
	l =[]
	for i in range(0, len(lst)):
		
		m = lst[i]
		remLst = lst[i + 1:]
		
		for p in combination(remLst, n-1):
			l.append([m]+p)
			
	return l

class Iterasi:
    _COLOR = "#f403a8"

    def __init__(self,dataset,start_point,hasil_hitung:dict,nama_full=True):
        self.dataset = dataset
        self.start_point = start_point
        self.data = hasil_hitung
        if nama_full:
            self.nama = self.dataset["nama_full"]
        else:
            self.nama = self.dataset["akronim"]        
        self.cluster = self._cluster_group()
        self.next_point = self._cari_next_point()
        self.wcv = sum(self.data['WCV'])
        self.bcv = self._hitungbcv()
        self.ratio = self.bcv/self.wcv

    def _hitungbcv(self):
        ds = self.start_point
        lst = list(range(len(ds)))
        pos = combination(lst,2) # 01, 12, 02

        daftar_jarak_centroid = [hitung_jarak(ds[comb[0]],ds[comb[1]]) for comb in pos]
        return sum(daftar_jarak_centroid)
    

    def _cluster_group(self)->dict:
        hasil = []

        banyak_cluster = len(self.data)-2
        data =self.dataset['data']
        nama = self.nama
        banyak_kolom = range(len(data[0]))

        for id in range(1,banyak_cluster+1):
            # Penentuan banyak kolom
            kolom_ke = {}
            for x in banyak_kolom:
                kolom_ke[x] = []

            hasil.append(Cluster(id,kolom_ke,[]))
        
        
        for i,id_cluster in enumerate(self.data['terdekat']):
            cluster = hasil[id_cluster-1]
            cluster.nama.append(nama[i])
            for k in banyak_kolom:
                cluster.data[k].append(data[i][k])

        
        return hasil
    
   
    def df(self):
        df = pd.DataFrame(self.data).sort_values(by=["terdekat"])
        return "\n"*2+tabulate.tabulate(df,headers=df.columns,tablefmt='grid', showindex=True)
    def _cari_next_point(self):
        next_point = []
        for cluster in self.cluster:
            N = len(cluster.nama)
            coordinate = []
            for axis in cluster.data.values():
                try:
                    coordinate.append(sum(axis)/N)
                except:
                    coordinate.append(0)

            
            next_point.append(coordinate)
        return next_point

    def to_pict(self,kolom=[0,1]):
        clm = [self.dataset['kolom'][x] for x in kolom]
        
        col = 'rgbcmyk'
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        for i, cluster in enumerate(self.cluster):
            color = col[i%len(col)]
            d = cluster.data
            ax1.scatter(d[kolom[0]], d[kolom[1]], s=10, 
            c=color, label="Cluster "+str(cluster.id))
        
        sp_x = []
        sp_y = []
        for Ax_point in self.start_point:
            sp_x.append(Ax_point[kolom[0]])
            sp_y.append(Ax_point[kolom[1]])

        ax1.scatter(sp_x, sp_y, s=15, 
        c=Iterasi._COLOR, label="Centroid",marker='^')

        plt.xlabel(clm[0])
        plt.ylabel(clm[1])
        plt.title("Cluster 2D")    
        plt.legend(loc='upper left')    
        plt.show()
    def to_3d(self,kolom=[0,1,2]):
        try:
            clm = [self.dataset['kolom'][x] for x in kolom]
        except:
            print("JUMLAH KOLOM KURANG")
            print("PLOT 3D GAGAL")
            return ""
            
        col = 'rgbcmyk'
        fig = plt.figure(figsize = (16, 9))
        ax1 = plt.axes(projection ="3d")
        for i, cluster in enumerate(self.cluster):
            color = col[i%len(col)]

            d = cluster.data

            ax1.scatter(d[kolom[0]], d[kolom[1]],d[kolom[2]], 
            color=color, label="Cluster "+str(cluster.id))
        
        sp_x = []
        sp_y = []
        sp_z = []
        for Ax_point in self.start_point:
            sp_x.append(Ax_point[kolom[0]])
            sp_y.append(Ax_point[kolom[1]])
            sp_z.append(Ax_point[kolom[2]])

        ax1.scatter(sp_x, sp_y, sp_z, s=15, 
        c=Iterasi._COLOR, label="Centroid",marker='^')

        plt.title("Cluster 3D")
        ax1.set_xlabel(clm[0])
        ax1.set_ylabel(clm[1])
        ax1.set_zlabel(clm[2])
            
        plt.legend(loc='upper left')    
        plt.show()

def proses_iterasi(dataset,banyak_cluster:int,parent=None):
    """_summary_

    Args:
        dataset (_type_): _description_
        parent (list, None):[[v1],[v2],[v3]]. Defaults to None.
    """

        
    hasil = {}
    for x in range(1,banyak_cluster+1):
        hasil['Cluster'+str(x)] = []

    
    hasil['terdekat'] = []
    hasil['WCV'] = []

    data = dataset['data']
    
    if parent:
        start_point = parent.next_point
        list_start = start_point
    else:
        n = len(data)
        rdm = randomN(len(data),banyak_cluster)
        list_start = [data[x] for x in rdm ]

    for point in data:
        shortest =10000
        for i,acuan in enumerate(list_start):
            jarak = hitung_jarak(acuan,point)
            if shortest>jarak:
                shortest = jarak
                id  = i+1
            hasil['Cluster'+str(i+1)].append(jarak)

        hasil['terdekat'].append(id)
        hasil['WCV'].append(shortest**2)

    return Iterasi(dataset,list_start,hasil)

def tanya_tabel(proses,tulisan:str,prnt = False):
    print(f'Tampilkan {tulisan} (y/n)')
    i = input("> ").lower()    
    if i=="y":
        if prnt:
            print(proses())
        else:
            proses()
    elif i=="n":
        print("Data Tidak Ditampilkan")
    else:
        print("Pilihan Ngawur dari opsi yang ada")
        print("Data Tidak Ditampilkan") 

def tanya_visual(proses,tulisan,dset,d=2):
    print(f'Tampilkan {tulisan} (y/n)')
    i = input("> ").lower()    
    if i=="y":
        kol = []
        k_list = dset['kolom']
        for x in range(d):
            while True:
                for d,val in enumerate(k_list):
                    print(d+1,'.',val)
                try:
                    print("\n")

                    j = int(input("Pilih Axis Mana"))
                    if i not in kol:
                        kol.append(j-1)
                        break
                    else:
                        print("Jawaban Ngawur")
                except:
                    print("Jawaban Ngawur")
                
        print("AXIS :",[k_list[x] for x in kol])            
        proses(kolom=kol)
        
    elif i=="n":
        print("Data Tidak Ditampilkan")
    else:
        print("Pilihan Ngawur dari opsi yang ada")
        print("Data Tidak Ditampilkan") 


banyak_cluster = 3
DIR = os.path.abspath(os.path.dirname(__file__))
FILE = '//kmeans_panen.csv'
INDEX_NAME = 'Kabupaten'
CSV_SEPARATOR = ','

if __name__ =='__main__':

    dataset = buat_dataset(DIR+FILE,INDEX_NAME,CSV_SEPARATOR)
    parent = None
    i = 1
    while True:
        pr = proses_iterasi(dataset,banyak_cluster,parent)
        print("BCV :",pr.bcv)   
        print("WCV :",pr.wcv)    
        print("Ratio:",pr.ratio)            
        tanya_tabel(pr.df,'Tampilkan Tabulasi Jarak',True)
        tanya_visual(pr.to_pict,'Tampilkan Visualisasi',dataset,2)
        tanya_visual(pr.to_3d,'Tampilkan Visualisasi 3D',dataset,3)
        
        if parent!=None and pr.ratio <= parent.ratio:
            print(f"Terdapat {i} Iterasi")
            print("Rasio BCV/WCV Iterasi ini Lebih kecil atau sama dengan Rasio Sebelumnya ")
            print("Rasio BCV/WCV Iterasi ini :",pr.ratio)
            print("Rasio BCV/WCV Sebelumnya :",pr.ratio)            
            break
        parent = pr
        i +=1
